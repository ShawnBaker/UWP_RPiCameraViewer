<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About.Label" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AboutItem.Content" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AboutPage.Text" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="Add.Label" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="Address.Text" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="AppName" xml:space="preserve">
    <value>RPi Camera Viewer</value>
  </data>
  <data name="Camera" xml:space="preserve">
    <value>Camera</value>
  </data>
  <data name="CameraName.Text" xml:space="preserve">
    <value>Camera Name</value>
  </data>
  <data name="CameraPage.Text" xml:space="preserve">
    <value>Camera</value>
  </data>
  <data name="CamerasItem.Content" xml:space="preserve">
    <value>Cameras</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Delete.Label" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="EditCamera" xml:space="preserve">
    <value>Edit Camera</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="ErrorBadAddress" xml:space="preserve">
    <value>The address is not a valid IP address or host name.</value>
  </data>
  <data name="ErrorBadPort" xml:space="preserve">
    <value>The port number must be between {0} and {1}.</value>
  </data>
  <data name="ErrorBadScanTimeout" xml:space="preserve">
    <value>The scan timeout must be between {0} and {1}.</value>
  </data>
  <data name="ErrorNameAlreadyExists" xml:space="preserve">
    <value>That name already exists.</value>
  </data>
  <data name="ErrorNoAddress" xml:space="preserve">
    <value>You must enter an address.</value>
  </data>
  <data name="ErrorNoCameraName" xml:space="preserve">
    <value>You must enter a camera name.</value>
  </data>
  <data name="Help.Label" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="HelpItem.Content" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="HelpMessage" xml:space="preserve">
    <value>This program plays the raw H.264 video from a Raspberry Pi.

Use the &lt;b&gt;raspivid&lt;/b&gt; program to generate the video stream and the &lt;b&gt;nc&lt;/b&gt; program to send the stream out over a specific port.

For example, to stream 1280x720 video at 15 frames per second over port 5001, you would do:

        raspivid -n -ih -t 0 -rot 0 -w 1280 -h 720 -b 1000000 -fps 15 -o - | nc -lkv4 5001

See the full article for more information:

        {0}</value>
  </data>
  <data name="HelpPage.Text" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="Name.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NavView.Header" xml:space="preserve">
    <value>RPi Camera Viewer</value>
  </data>
  <data name="Network.Text" xml:space="preserve">
    <value>Network</value>
  </data>
  <data name="NetworkName" xml:space="preserve">
    <value>Network: {0}</value>
  </data>
  <data name="NewCamera" xml:space="preserve">
    <value>New Camera</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="NewCamerasFound" xml:space="preserve">
    <value>New cameras found: {0}</value>
  </data>
  <data name="OkToDeleteAllCameras" xml:space="preserve">
    <value>Are you sure you want to delete all the cameras?</value>
  </data>
  <data name="OkToDeleteCamera" xml:space="preserve">
    <value>Are you sure you want to delete this camera?</value>
  </data>
  <data name="Port.Text" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="Scan.Label" xml:space="preserve">
    <value>Scan</value>
  </data>
  <data name="ScanningForCameras.Text" xml:space="preserve">
    <value>Scanning for Cameras</value>
  </data>
  <data name="ScanningOnPort" xml:space="preserve">
    <value>Scanning on port {0}</value>
  </data>
  <data name="ScanTimeout.Text" xml:space="preserve">
    <value>Scan Timeout</value>
  </data>
  <data name="Settings.Label" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="SettingsPage.Text" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="ShowAllNetworks.Text" xml:space="preserve">
    <value>Show all networks</value>
  </data>
  <data name="Version" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="Copyright" xml:space="preserve">
    <value>Copyright © 2019 Shawn Baker

Raspberry image by {0}
Camera image by {1}

This is an open source program.
It's available on {2} under the {3} License.</value>
  </data>
  <data name="GithubLink" xml:space="preserve">
    <value>https://github.com/ShawnBaker/UWP_RPiCameraViewer</value>
  </data>
  <data name="GithubText" xml:space="preserve">
    <value>github</value>
  </data>
  <data name="MartinBerubeLink" xml:space="preserve">
    <value>http://www.how-to-draw-funny-cartoons.com</value>
  </data>
  <data name="MartinBerubeText" xml:space="preserve">
    <value>Martin Bérubé</value>
  </data>
  <data name="MITLink" xml:space="preserve">
    <value>https://opensource.org/licenses/MIT</value>
  </data>
  <data name="MITText" xml:space="preserve">
    <value>MIT</value>
  </data>
  <data name="OxygenTeamLink" xml:space="preserve">
    <value>http://www.oxygen-icons.org</value>
  </data>
  <data name="OxygenTeamText" xml:space="preserve">
    <value>Oxygen Team</value>
  </data>
  <data name="StreamingArticleLink" xml:space="preserve">
    <value>http://frozen.ca/streaming-raw-h-264-from-a-raspberry-pi/</value>
  </data>
  <data name="StreamingArticleText" xml:space="preserve">
    <value>Streaming Raw H.264 From A Raspberry Pi</value>
  </data>
</root>